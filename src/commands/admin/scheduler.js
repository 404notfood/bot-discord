/**
 * @file scheduler.js
 * @description Commande pour g√©rer les t√¢ches planifi√©es du scheduler
 */

import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } from 'discord.js';
import * as Logger from '../../utils/logger.js';
import { ErrorHandler } from '../../utils/ErrorHandler.js';
import { 
    getActiveTasks, 
    getSchedulerStats, 
    getTaskInfo, 
    stopTask, 
    startTask, 
    executeTaskNow,
    PRIORITY,
    CRON_PATTERNS 
} from '../../utils/scheduler.js';

export default {
    data: new SlashCommandBuilder()
        .setName('scheduler')
        .setDescription('Gestion des t√¢ches planifi√©es du bot')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('Affiche la liste des t√¢ches planifi√©es')
                .addStringOption(option =>
                    option.setName('filter')
                        .setDescription('Filtrer les t√¢ches')
                        .setRequired(false)
                        .addChoices(
                            { name: 'Toutes', value: 'all' },
                            { name: 'En cours', value: 'running' },
                            { name: 'Arr√™t√©es', value: 'stopped' },
                            { name: 'Priorit√© √©lev√©e', value: 'high_priority' }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('stats')
                .setDescription('Affiche les statistiques du scheduler')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('Affiche les d√©tails d\'une t√¢che sp√©cifique')
                .addStringOption(option =>
                    option.setName('task_id')
                        .setDescription('ID de la t√¢che')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('control')
                .setDescription('Contr√¥le une t√¢che (start/stop/execute)')
                .addStringOption(option =>
                    option.setName('task_id')
                        .setDescription('ID de la t√¢che')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('Action √† effectuer')
                        .setRequired(true)
                        .addChoices(
                            { name: 'D√©marrer', value: 'start' },
                            { name: 'Arr√™ter', value: 'stop' },
                            { name: 'Ex√©cuter maintenant', value: 'execute' }
                        )
                )
        ),

    // Permissions requises
    permissions: ['scheduler.manage'],
    category: 'admin',

    async execute(interaction) {
        try {
            const subcommand = interaction.options.getSubcommand();

            await interaction.deferReply({ ephemeral: true });

            switch (subcommand) {
                case 'list':
                    await this.handleListCommand(interaction);
                    break;
                case 'stats':
                    await this.handleStatsCommand(interaction);
                    break;
                case 'info':
                    await this.handleInfoCommand(interaction);
                    break;
                case 'control':
                    await this.handleControlCommand(interaction);
                    break;
                default:
                    await interaction.editReply('Sous-commande inconnue');
            }

        } catch (error) {
            await ErrorHandler.handleInteractionError(error, interaction, 'scheduler');
        }
    },

    /**
     * G√®re la commande list
     */
    async handleListCommand(interaction) {
        const filter = interaction.options.getString('filter') || 'all';
        
        let tasks = getActiveTasks();
        
        // Appliquer les filtres
        switch (filter) {
            case 'running':
                tasks = tasks.filter(task => task.isRunning);
                break;
            case 'stopped':
                tasks = tasks.filter(task => !task.isRunning);
                break;
            case 'high_priority':
                tasks = tasks.filter(task => task.priority >= PRIORITY.HIGH);
                break;
        }

        const embed = new EmbedBuilder()
            .setTitle('üìÖ T√¢ches Planifi√©es')
            .setColor('#3498db')
            .setTimestamp();

        if (tasks.length === 0) {
            embed.setDescription('Aucune t√¢che planifi√©e trouv√©e');
        } else {
            // Grouper par priorit√©
            const tasksByPriority = {
                [PRIORITY.CRITICAL]: [],
                [PRIORITY.HIGH]: [],
                [PRIORITY.NORMAL]: [],
                [PRIORITY.LOW]: []
            };

            tasks.forEach(task => {
                tasksByPriority[task.priority || PRIORITY.NORMAL].push(task);
            });

            // Afficher chaque groupe
            Object.entries(tasksByPriority).forEach(([priority, priorityTasks]) => {
                if (priorityTasks.length === 0) return;

                const priorityNames = {
                    [PRIORITY.CRITICAL]: 'üî¥ Critique',
                    [PRIORITY.HIGH]: 'üü° √âlev√©e',
                    [PRIORITY.NORMAL]: 'üü¢ Normale',
                    [PRIORITY.LOW]: '‚ö™ Faible'
                };

                const tasksList = priorityTasks.map(task => {
                    const status = task.isRunning ? 'üîÑ' : '‚è∏Ô∏è';
                    const successRate = task.successRate ? ` (${task.successRate}%)` : '';
                    return `${status} \`${task.taskId}\` - ${task.description}${successRate}`;
                }).join('\n');

                embed.addFields({
                    name: priorityNames[priority],
                    value: tasksList.length > 1024 ? tasksList.substring(0, 1021) + '...' : tasksList,
                    inline: false
                });
            });
        }

        embed.setFooter({ 
            text: `${tasks.length} t√¢che(s) ‚Ä¢ Filtre: ${filter}` 
        });

        await interaction.editReply({ embeds: [embed] });
    },

    /**
     * G√®re la commande stats
     */
    async handleStatsCommand(interaction) {
        const stats = getSchedulerStats();
        
        const embed = new EmbedBuilder()
            .setTitle('üìä Statistiques du Scheduler')
            .setColor('#2ecc71')
            .setTimestamp();

        embed.addFields(
            {
                name: '‚ö° Performance',
                value: `Uptime: **${stats.uptimeFormatted}**\n` +
                       `Taux de succ√®s: **${stats.successRate}%**\n` +
                       `Temps moyen: **${stats.averageExecutionTime}ms**`,
                inline: true
            },
            {
                name: 'üìã T√¢ches',
                value: `Actives: **${stats.activeTasks}**\n` +
                       `En cours: **${stats.runningTasks}**\n` +
                       `Cr√©√©es: **${stats.tasksCreated}**`,
                inline: true
            },
            {
                name: 'üìà Ex√©cutions',
                value: `Ex√©cut√©es: **${stats.tasksExecuted}**\n` +
                       `R√©ussies: **${stats.tasksCompleted}**\n` +
                       `√âchecs: **${stats.tasksFailed}**`,
                inline: true
            }
        );

        if (stats.lastError) {
            const errorTime = new Date(stats.lastError.timestamp).toLocaleString('fr-FR');
            embed.addFields({
                name: '‚ùå Derni√®re erreur',
                value: `T√¢che: \`${stats.lastError.taskId}\`\n` +
                       `Erreur: ${stats.lastError.error}\n` +
                       `Date: ${errorTime}`,
                inline: false
            });
        }

        await interaction.editReply({ embeds: [embed] });
    },

    /**
     * G√®re la commande info
     */
    async handleInfoCommand(interaction) {
        const taskId = interaction.options.getString('task_id');
        const taskInfo = getTaskInfo(taskId);

        if (!taskInfo) {
            await interaction.editReply({
                content: `‚ùå T√¢che \`${taskId}\` non trouv√©e`
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setTitle(`üìã D√©tails de la t√¢che: ${taskInfo.description}`)
            .setColor(taskInfo.isRunning ? '#f39c12' : '#95a5a6')
            .setTimestamp();

        const status = taskInfo.isRunning ? 'üîÑ En cours' : '‚è∏Ô∏è Arr√™t√©e';
        const priorityNames = {
            [PRIORITY.CRITICAL]: 'üî¥ Critique',
            [PRIORITY.HIGH]: 'üü° √âlev√©e',
            [PRIORITY.NORMAL]: 'üü¢ Normale',
            [PRIORITY.LOW]: '‚ö™ Faible'
        };

        embed.addFields(
            {
                name: '‚ÑπÔ∏è Informations g√©n√©rales',
                value: `ID: \`${taskInfo.taskId}\`\n` +
                       `Statut: ${status}\n` +
                       `Priorit√©: ${priorityNames[taskInfo.priority] || 'Non d√©finie'}\n` +
                       `Pattern: \`${taskInfo.pattern}\`\n` +
                       `Fuseau: ${taskInfo.timezone}`,
                inline: true
            },
            {
                name: 'üìä Statistiques',
                value: `Ex√©cutions: **${taskInfo.executions}**\n` +
                       `√âchecs: **${taskInfo.failures}**\n` +
                       `Taux de succ√®s: **${taskInfo.successRate}%**\n` +
                       `Temps moyen: **${taskInfo.averageExecutionTime}ms**\n` +
                       `Temps total: **${Math.round(taskInfo.totalTime / 1000)}s**`,
                inline: true
            },
            {
                name: '‚è∞ Planification',
                value: `Cr√©√©e: <t:${Math.floor(taskInfo.createdAt.getTime() / 1000)}:R>\n` +
                       `Derni√®re exec: ${taskInfo.lastExecution ? 
                           `<t:${Math.floor(taskInfo.lastExecution.getTime() / 1000)}:R>` : 
                           'Jamais'}\n` +
                       `Prochaine exec: ${taskInfo.nextExecution ? 
                           `<t:${Math.floor(taskInfo.nextExecution.getTime() / 1000)}:R>` : 
                           'Non planifi√©e'}`,
                inline: false
            }
        );

        // M√©tadonn√©es si pr√©sentes
        if (Object.keys(taskInfo.metadata).length > 0) {
            const metadataStr = Object.entries(taskInfo.metadata)
                .map(([key, value]) => `${key}: ${value}`)
                .join('\n');
            
            embed.addFields({
                name: 'üè∑Ô∏è M√©tadonn√©es',
                value: metadataStr.length > 1024 ? metadataStr.substring(0, 1021) + '...' : metadataStr,
                inline: false
            });
        }

        await interaction.editReply({ embeds: [embed] });
    },

    /**
     * G√®re la commande control
     */
    async handleControlCommand(interaction) {
        const taskId = interaction.options.getString('task_id');
        const action = interaction.options.getString('action');

        const taskInfo = getTaskInfo(taskId);
        if (!taskInfo) {
            await interaction.editReply({
                content: `‚ùå T√¢che \`${taskId}\` non trouv√©e`
            });
            return;
        }

        let result = false;
        let message = '';

        switch (action) {
            case 'start':
                result = startTask(taskId);
                message = result ? 
                    `‚úÖ T√¢che \`${taskId}\` d√©marr√©e` : 
                    `‚ùå Impossible de d√©marrer la t√¢che \`${taskId}\``;
                break;

            case 'stop':
                result = stopTask(taskId);
                message = result ? 
                    `‚è∏Ô∏è T√¢che \`${taskId}\` arr√™t√©e` : 
                    `‚ùå Impossible d'arr√™ter la t√¢che \`${taskId}\``;
                break;

            case 'execute':
                result = await executeTaskNow(taskId);
                message = result ? 
                    `‚ñ∂Ô∏è T√¢che \`${taskId}\` ex√©cut√©e` : 
                    `‚ùå Impossible d'ex√©cuter la t√¢che \`${taskId}\``;
                break;

            default:
                message = `‚ùå Action \`${action}\` non reconnue`;
        }

        await interaction.editReply({
            content: message
        });

        // Log de l'action
        Logger.info(`Action scheduler effectu√©e par ${interaction.user.username}`, {
            userId: interaction.user.id,
            action,
            taskId,
            result
        });
    }
};