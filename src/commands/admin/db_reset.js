/**
 * @file db_reset.js
 * @description Commande pour r√©initialiser et initialiser la base de donn√©es
 */

import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import { AdminCommand } from '../../models/AdminCommand.js';
import * as Logger from '../../utils/logger.js';
import { initDatabase } from '../../utils/dbInit.js';

class DbResetCommand extends AdminCommand {
  constructor() {
    super({
      name: 'db_reset',
      description: 'R√©initialise et initialise la base de donn√©es',
      category: 'admin',
      adminOnly: true // Uniquement accessible aux administrateurs
    });

    this.data = new SlashCommandBuilder()
      .setName('db_reset')
      .setDescription('R√©initialise et initialise la base de donn√©es');
  }

  async execute(interaction) {
    try {
      // Avertir que l'op√©ration est en cours
      await interaction.editReply('üîÑ Tentative de connexion et initialisation de la base de donn√©es...');

      // Lancer l'initialisation
      const success = await initDatabase();

      if (success) {
        const embed = new EmbedBuilder()
          .setTitle('‚úÖ Base de donn√©es initialis√©e')
          .setDescription('La connexion √† la base de donn√©es a √©t√© √©tablie et les tables ont √©t√© cr√©√©es ou v√©rifi√©es.')
          .setColor(0x2ecc71) // Vert
          .addFields(
            { name: '√âtat', value: 'Connect√©' },
            { name: 'Tables', value: 'Toutes les tables requises sont disponibles' }
          )
          .setFooter({ text: 'Base de donn√©es pr√™te √† l\'emploi' })
          .setTimestamp();

        await interaction.editReply({ content: null, embeds: [embed] });
        
        Logger.info('Commande db_reset ex√©cut√©e avec succ√®s', {
          userId: interaction.user.id,
          guildId: interaction.guild?.id
        });
      } else {
        const embed = new EmbedBuilder()
          .setTitle('‚ùå √âchec de l\'initialisation')
          .setDescription('Impossible d\'initialiser la base de donn√©es. V√©rifiez les logs pour plus d\'informations.')
          .setColor(0xe74c3c) // Rouge
          .addFields(
            { name: '√âtat', value: 'D√©connect√©' },
            { name: 'Mode', value: 'Fonctionnement limit√©' },
            { name: 'Solution', value: 'V√©rifiez vos informations de connexion dans le fichier .env et assurez-vous que MySQL est en cours d\'ex√©cution.' }
          )
          .setFooter({ text: 'Consultez les logs pour plus de d√©tails' })
          .setTimestamp();

        await interaction.editReply({ content: null, embeds: [embed] });
        
        Logger.warn('√âchec de la commande db_reset', {
          userId: interaction.user.id,
          guildId: interaction.guild?.id
        });
      }
    } catch (error) {
      Logger.error('Erreur lors de l\'ex√©cution de la commande db_reset', {
        error: error.message,
        stack: error.stack,
        userId: interaction.user.id
      });
      
      await interaction.editReply({ 
        content: '‚ùå Une erreur est survenue lors de la r√©initialisation de la base de donn√©es.'
      });
    }
  }
}

export default new DbResetCommand(); 