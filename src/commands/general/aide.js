/**
 * @file aide.js
 * @description Commande d'aide qui liste les commandes disponibles
 */

import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } from 'discord.js';
import * as Logger from '../../utils/logger.js';

export default {
  data: new SlashCommandBuilder()
    .setName('aide')
    .setDescription('Affiche la liste des commandes disponibles.'),
    
  async execute(interaction) {
    try {
      // Cr√©er un embed pour l'aide
      const embed = new EmbedBuilder()
        .setTitle('Aide - Commandes Disponibles')
        .setColor('#3498db')
        .setDescription('Voici la liste des commandes disponibles sur ce serveur. Utilisez `/` pour ouvrir le menu des commandes slash.')
        .addFields(
          {
            name: 'üìã Commandes G√©n√©rales',
            value: '`/aide` - Affiche cette aide\n' +
                  '`/search` - Recherche sur le web\n' +
                  '`/docs` - Documentation technique'
          }
        );

      // IDs des administrateurs du bot - ajouter ici les IDs des utilisateurs administrateurs
      const adminIDs = ['709042879145836564']; // Ajoutez votre ID ici
      
      // V√©rifier si l'utilisateur est administrateur via ses permissions Discord ou son ID
      const hasAdminPermission = interaction.member?.permissions.has(PermissionFlagsBits.Administrator) || false;
      const isAdminByID = adminIDs.includes(interaction.user.id);
      const isAdmin = hasAdminPermission || isAdminByID;
      

      // Ajouter les commandes d'administration si l'utilisateur est admin
      if (isAdmin) {
        embed.addFields({
          name: 'üìã Commandes Administrateur',
          value: '`/ping` - V√©rifier la latence du bot\n' +
                '`/info` - Informations sur le bot et le serveur\n' +
                '`/rappel` - Cr√©er un rappel'
        });
        
        embed.addFields({
          name: 'üõ°Ô∏è Commandes de Mod√©ration',
          value: '`/ban_add` - Bannir un utilisateur\n' +
                '`/ban_remove` - D√©bannir un utilisateur'
        });
        
        embed.addFields({
          name: 'üîß Administration - Utilisateurs',
          value: '`/add_admin` - Ajouter un administrateur\n' +
                '`/remove_admin` - Retirer un administrateur\n' +
                '`/addmoderator` - Ajouter un mod√©rateur\n' +
                '`/remove_mod` - Retirer un mod√©rateur\n' +
                '`/list_staff` - Liste des administrateurs et mod√©rateurs'
        });
        
        embed.addFields({
          name: '‚öôÔ∏è Administration - Syst√®me',
          value: '`/config` - Configuration g√©n√©rale\n' +
                '`/start` - D√©marrer des services du bot\n' +
                '`/stop` - Arr√™ter des services du bot\n' +
                '`/stats` - Statistiques du bot\n' +
                '`/test` - Tester toutes les fonctionnalit√©s\n' +
                '`/monitoring` - Surveillance du syst√®me'
        });

        embed.addFields({
          name: 'üóÑÔ∏è Administration - Base de donn√©es',
          value: '`/db_status` - √âtat de la base de donn√©es\n' +
                '`/db_fix` - R√©parer la base de donn√©es\n' +
                '`/db_reset` - R√©initialiser la base de donn√©es\n' +
                '`/system_health` - Sant√© globale du syst√®me\n' +
                '`/diagnostics` - Diagnostics complets'
        });

        embed.addFields({
          name: 'üßë‚Äçüíª Syst√®me Anti-Studi',
          value: '`/studi_config` - Configuration du syst√®me anti-Studi\n' +
                '`/studi_status` - √âtat actuel du syst√®me anti-Studi\n' +
                '`/studi_ban_add` - Ajouter √† la liste anti-Studi\n' +
                '`/studi_ban_remove` - Retirer de la liste anti-Studi\n' +
                '`/studi_whitelist` - G√©rer la whitelist Studi\n' +
                '`/studi_dashboard` - Dashboard du syst√®me anti-Studi\n' +
                '`/studi_db_init` - Initialiser la base de donn√©es Studi'
        });
        
        embed.addFields({
          name: 'üìä Gestion de Projets',
          value: '`/create_project` - Cr√©er un nouveau projet\n' +
                '`/list_projects` - Liste tous les projets\n' +
                '`/create_subgroup` - Cr√©er un sous-groupe\n' +
                '`/add_to_subgroup` - Ajouter un membre au sous-groupe\n' +
                '`/remove_from_subgroup` - Retirer un membre du sous-groupe\n' +
                '`/list_subgroups` - Liste des sous-groupes\n' +
                '`/list_subgroup_members` - Membres d\'un sous-groupe'
        });

        embed.addFields({
          name: 'üîê Permissions et Canaux',
          value: '`/bot_permissions` - G√©rer les permissions du bot\n' +
                '`/bot_roles` - G√©rer les r√¥les du bot\n' +
                '`/create_private_channel` - Cr√©er un canal priv√©\n' +
                '`/manage_channel_permissions` - G√©rer les permissions de canal'
        });

        embed.addFields({
          name: '‚è∞ Planification et Services',
          value: '`/scheduler` - G√©rer le planificateur de t√¢ches'
        });
      }
      
      // Ajouter un r√©capitulatif pour les admins
      if (isAdmin) {
        embed.addFields({
          name: '‚ÑπÔ∏è Informations',
          value: `Bot avec **42 commandes** au total\n‚Ä¢ 3 commandes g√©n√©rales\n‚Ä¢ 5 commandes administrateur\n‚Ä¢ 34 commandes administratives\n\nUtilisez \`/test all\` pour v√©rifier toutes les fonctionnalit√©s`,
          inline: false
        });
      } else {
        embed.addFields({
          name: '‚ÑπÔ∏è Informations',
          value: 'Bot avec **3 commandes** accessibles aux membres\n‚Ä¢ 3 commandes g√©n√©rales seulement',
          inline: false
        });
      }

      embed.setFooter({ text: 'Utilisez /aide pour voir cette liste √† tout moment' })
        .setTimestamp();
      
      // Envoyer la r√©ponse
      await interaction.reply({ embeds: [embed] });
      
      // Journaliser l'action
      Logger.info('Commande aide ex√©cut√©e', {
        userId: interaction.user.id,
        guildId: interaction.guild?.id || 'DM',
        isAdmin: isAdmin,
        isAdminByID: isAdminByID,
        hasAdminPermission: hasAdminPermission
      });
    } catch (error) {
      Logger.error('Erreur lors de l\'ex√©cution de la commande aide', {
        error: error.message,
        stack: error.stack,
        userId: interaction.user.id
      });
      
      // R√©pondre avec l'erreur
      try {
        if (interaction.replied || interaction.deferred) {
          await interaction.followUp({ content: 'Une erreur est survenue lors de l\'affichage de l\'aide.', ephemeral: true });
        } else {
          await interaction.reply({ content: 'Une erreur est survenue lors de l\'affichage de l\'aide.', ephemeral: true });
        }
      } catch (replyError) {
        Logger.error('Impossible de r√©pondre √† l\'interaction', {
          error: replyError.message,
          userId: interaction.user.id
        });
      }
    }
  }
};